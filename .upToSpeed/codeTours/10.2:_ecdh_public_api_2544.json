{
  "title": "10.2: ECDH Public API",
  "id": "BgIldIWwwgquO7x63ymZABET0hEnC30sCDx6JtRnllY=",
  "originalId": 2544,
  "position": 45,
  "steps": [
    {
      "type": "highlight",
      "description": "The very first comment establishes the **return-value contract** for any custom ECDH hash callback: it must return 1.  A 0 bubbles up as an overall `secp256k1_ecdh` failure, and every other value is explicitly undefined.",
      "file": "include/secp256k1_ecdh.h",
      "highlight": [
        {
          "start": 10,
          "end": 16
        }
      ],
      "title": "",
      "id": "30649"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_ecdh_hash_function` takes:\n- `output` – buffer for the derived secret\n- `x32`, `y32` – coordinates of the shared point\n- `data` – user pointer passed through\nMust return 1 to indicate success.",
      "file": "include/secp256k1_ecdh.h",
      "highlight": [
        {
          "start": 21,
          "end": 26
        }
      ],
      "title": "",
      "id": "30650"
    },
    {
      "type": "highlight",
      "description": "Library code already ships with `secp256k1_ecdh_hash_function_sha256`. It compresses the point to 33 bytes, hashes with SHA-256, and always produces exactly 32 bytes of output.",
      "file": "include/secp256k1_ecdh.h",
      "highlight": [
        {
          "start": 28,
          "end": 31
        }
      ],
      "title": "",
      "id": "30651"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_ecdh_hash_function_default` is currently just an alias for the `SHA-256` helper, but its **name** cautions that the default could change in a future version.",
      "file": "include/secp256k1_ecdh.h",
      "highlight": [
        {
          "start": 32,
          "end": 35
        }
      ],
      "title": "",
      "id": "30652"
    },
    {
      "type": "highlight",
      "description": "Key behavioural guarantees of `secp256k1_ecdh`:\n- Scalar-point multiplication runs in constant time.\n- Supplying `NULL` for `hashfp` falls back to SHA-256.\n- A return value of 0 means either an invalid private key **or** a hash callback that returned 0.",
      "file": "include/secp256k1_ecdh.h",
      "highlight": [
        {
          "start": 36,
          "end": 49
        }
      ],
      "title": "",
      "id": "30653"
    },
    {
      "type": "highlight",
      "description": "Walking the prototype:\n1 `ctx` – initialised context.\n2 `output[32]` – caller-allocated buffer.\n3 `pubkey` – validated public key.\n4 `seckey` – 32-byte scalar (non-zero, no overflow).\n5 `hashfp` – may be `NULL` to accept the default.\n6 `data` – forwarded to `hashfp`.",
      "file": "include/secp256k1_ecdh.h",
      "highlight": [
        {
          "start": 50,
          "end": 57
        }
      ],
      "title": "",
      "id": "30654"
    },
    {
      "type": "textOnly",
      "description": "**SECP256K1_ARG_NONNULL** decorations at the end of the declaration let compilers warn if any of the critical pointers are accidentally passed as `NULL`.",
      "title": "",
      "id": "30655"
    },
    {
      "type": "highlight",
      "description": "Lines 6-8 open an `extern \"C\"` block (closed again at 59-61). These guards prevent C++ name-mangling so that C and C++ code can link against the same symbols.",
      "file": "include/secp256k1_ecdh.h",
      "highlight": [
        {
          "start": 6,
          "end": 8
        }
      ],
      "title": "",
      "id": "30656"
    },
    {
      "type": "textOnly",
      "description": "A minimal ECDH call requires just an output buffer and uses the default SHA-256 hash function. This simplest form needs only a context, output buffer for the shared secret, public key, and private key - with no custom hash function specified.",
      "title": "",
      "id": "30657"
    },
    {
      "type": "textOnly",
      "description": "The 32-byte result is secret key material—store it cautiously and wipe it from memory as soon as it is no longer needed.",
      "title": "",
      "id": "30658"
    }
  ]
}