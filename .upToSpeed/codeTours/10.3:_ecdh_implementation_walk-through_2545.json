{
  "title": "10.3: ECDH Implementation Walk-through",
  "id": "cA/SNKEXYR5N+LmB+RKe8M3SWJnR4vOdvXhh7X69Ff4=",
  "originalId": 2545,
  "position": 46,
  "steps": [
    {
      "type": "textOnly",
      "description": "This tour follows `secp256k1`’s ECDH routine line-by-line, showing how **constant-time execution**, **strict input validation** and **full zeroisation** are achieved.",
      "title": "",
      "id": "30605"
    },
    {
      "type": "highlight",
      "description": "A **guarded header** is followed by two `includes`.  The second one drags in `ecmult_const_impl.h`, the **constant-time scalar-multiplication engine** that underpins the whole algorithm.",
      "file": "src/modules/ecdh/main_impl.h",
      "highlight": [
        {
          "start": 7,
          "end": 12
        }
      ],
      "title": "",
      "id": "30606"
    },
    {
      "type": "highlight",
      "description": "`ecdh_hash_function_sha256()` builds the shared-secret: derive a parity byte (line 14), feed `version∥x` into a fresh **SHA-256** (lines 18-21), finalise, then immediately wipe the hash state (line 22).  It returns `1` (line 24) so callers can AND its result with other checks without introducing secret-dependent flow.",
      "file": "src/modules/ecdh/main_impl.h",
      "highlight": [
        {
          "start": 13,
          "end": 25
        }
      ],
      "title": "",
      "id": "30607"
    },
    {
      "type": "highlight",
      "description": "These `constant pointers` publish the helper as `default hash functions`. Their immutability keeps the `exported symbol` stable across library updates.",
      "file": "src/modules/ecdh/main_impl.h",
      "highlight": [
        {
          "start": 27,
          "end": 29
        }
      ],
      "title": "",
      "id": "30608"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_ecdh()` starts by allocating everything it needs: overflow flag, Jacobian & affine points, a scalar, and two 32-byte scratch buffers for the `x` and `y` coordinates.",
      "file": "src/modules/ecdh/main_impl.h",
      "highlight": [
        {
          "start": 30,
          "end": 38
        }
      ],
      "title": "",
      "id": "30609"
    },
    {
      "type": "highlight",
      "description": "`VERIFY_CHECK` and `ARG_CHECK` abort execution if the context is invalid or any pointer is `NULL`, stopping **undefined behaviour** before secrets are processed.",
      "file": "src/modules/ecdh/main_impl.h",
      "highlight": [
        {
          "start": 39,
          "end": 44
        }
      ],
      "title": "",
      "id": "30610"
    },
    {
      "type": "highlight",
      "description": "The public key is loaded (line 48).  `scalar_set_b32` parses the secret and raises overflow if it is ≥ n (line 49); the follow-up test also rejects the all-zero scalar (line 51).  Regardless of validity, `scalar_cmov` replaces bad inputs with 1 in constant time (line 52), preventing observable divergences.",
      "file": "src/modules/ecdh/main_impl.h",
      "highlight": [
        {
          "start": 48,
          "end": 52
        }
      ],
      "title": "",
      "id": "30611"
    },
    {
      "type": "highlight",
      "description": "`ecmult_const` performs the heavy constant-time multiplication `s·P` (line 54), after which the result is brought back to affine space (line 55).",
      "file": "src/modules/ecdh/main_impl.h",
      "highlight": [
        {
          "start": 54,
          "end": 55
        }
      ],
      "title": "",
      "id": "30612"
    },
    {
      "type": "highlight",
      "description": "Field elements are normalised and copied into fixed-width big-endian arrays — an operation with no secret-dependent branches.",
      "file": "src/modules/ecdh/main_impl.h",
      "highlight": [
        {
          "start": 58,
          "end": 61
        }
      ],
      "title": "",
      "id": "30613"
    },
    {
      "type": "highlight",
      "description": "The caller-supplied (or default) `hashfp()` compresses the point, giving the final shared secret.",
      "file": "src/modules/ecdh/main_impl.h",
      "highlight": [
        {
          "start": 63,
          "end": 63
        }
      ],
      "title": "",
      "id": "30614"
    },
    {
      "type": "highlight",
      "description": "Every temporary that ever held sensitive data — `x`, `y`, the scalar, and both group representations — is wiped with dedicated clear helpers.",
      "file": "src/modules/ecdh/main_impl.h",
      "highlight": [
        {
          "start": 65,
          "end": 69
        }
      ],
      "title": "",
      "id": "30615"
    },
    {
      "type": "highlight",
      "description": "Return value is `(hash_result != 0) && !overflow`, ensuring that any invalid scalar makes the whole operation fail without leaking timing information.",
      "file": "src/modules/ecdh/main_impl.h",
      "highlight": [
        {
          "start": 71,
          "end": 71
        }
      ],
      "title": "",
      "id": "30616"
    },
    {
      "type": "textOnly",
      "description": "By combining **constant-time primitives**, **rigorous argument checks** and **systematic zeroisation**, the routine meets the audit goals: resistance to **timing** and **invalid-curve attacks**, and no stray secrets left in memory.",
      "title": "",
      "id": "30617"
    }
  ]
}