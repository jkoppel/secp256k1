{
  "title": "11.2: Public API Deep-Dive",
  "id": "VWqkuiSGEeQPZCsGuoGo3AZqrlSl1fHWelJw6iyi02c=",
  "originalId": 2550,
  "position": 51,
  "steps": [
    {
      "type": "textOnly",
      "description": "The public symbols in this header are contracts.  Every comment describes the caller-visible semantics that later C code is obliged to honour.  We begin with the objects themselves and then walk through each helper in turn.",
      "title": "",
      "id": "30532"
    },
    {
      "type": "highlight",
      "description": "**An x-only public key** is defined to be an even-Y curve point whose **32-byte X coordinate** is enough for serialisation (`BIP-340`). The **on-wire size** is fixed – callers only ever store or transmit those `32 bytes`.",
      "file": "include/secp256k1_extrakeys.h",
      "highlight": [
        {
          "start": 10,
          "end": 19
        }
      ],
      "title": "",
      "id": "30533"
    },
    {
      "type": "highlight",
      "description": "Internally the `library` keeps 64 bytes, but that representation is opaque. Users may copy or move the struct; they must not peek inside.",
      "file": "include/secp256k1_extrakeys.h",
      "highlight": [
        {
          "start": 22,
          "end": 24
        }
      ],
      "title": "",
      "id": "30534"
    },
    {
      "type": "highlight",
      "description": "A **keypair** (`secret + public`) follows the same pattern: opaque, move-able, and promised to stay 96 bytes across versions.",
      "file": "include/secp256k1_extrakeys.h",
      "highlight": [
        {
          "start": 26,
          "end": 35
        }
      ],
      "title": "",
      "id": "30535"
    },
    {
      "type": "highlight",
      "description": "Parsing: feed `32` raw bytes and receive `1` only if they decode to a valid even-Y point. When `0` is returned the `out-param` is guaranteed to hold an invalid value, so accidentally using it cannot succeed later.",
      "file": "include/secp256k1_extrakeys.h",
      "highlight": [
        {
          "start": 37,
          "end": 45
        }
      ],
      "title": "",
      "id": "30536"
    },
    {
      "type": "highlight",
      "description": "**Serialising** is a total operation – it never fails. The function always writes exactly 32 bytes and returns `1`.",
      "file": "include/secp256k1_extrakeys.h",
      "highlight": [
        {
          "start": 53,
          "end": 60
        }
      ],
      "title": "",
      "id": "30537"
    },
    {
      "type": "highlight",
      "description": "Comparison defines a strict lexicographic order on the 32-byte serialisations, returning <0, 0 or >0 exactly like `memcmp`.",
      "file": "include/secp256k1_extrakeys.h",
      "highlight": [
        {
          "start": 67,
          "end": 75
        }
      ],
      "title": "",
      "id": "30538"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_xonly_pubkey_from_pubkey` discards Y and, if necessary, negates the input point so that the returned key is even-Y.  `pk_parity` tells the caller whether such a negation happened (1) or not (0).",
      "file": "include/secp256k1_extrakeys.h",
      "highlight": [
        {
          "start": 82,
          "end": 98
        }
      ],
      "title": "",
      "id": "30539"
    },
    {
      "type": "highlight",
      "description": "`xonly_pubkey_tweak_add` adds `tweak·G` to the internal point. It can fail only in the degenerate case that the tweak is the secret-key negation (≈2⁻¹²⁸ chance for random tweaks). The result may have odd Y, so the output type is the *full* `secp256k1_pubkey`.",
      "file": "include/secp256k1_extrakeys.h",
      "highlight": [
        {
          "start": 100,
          "end": 118
        }
      ],
      "title": "",
      "id": "30540"
    },
    {
      "type": "highlight",
      "description": "Notice the asymmetry in the prototype: `x-only input`, `full pubkey output` – a reminder that tweaking can flip parity.",
      "file": "include/secp256k1_extrakeys.h",
      "highlight": [
        {
          "start": 120,
          "end": 126
        }
      ],
      "title": "",
      "id": "30541"
    },
    {
      "type": "highlight",
      "description": "`tweak_add_check` proves that a given (x,parity) pair really is the result of `tweak_add`.  The comment warns that this alone is **not** a commitment unless the tweak itself was generated with additional rules.",
      "file": "include/secp256k1_extrakeys.h",
      "highlight": [
        {
          "start": 127,
          "end": 139
        }
      ],
      "title": "",
      "id": "30542"
    },
    {
      "type": "highlight",
      "description": "`keypair_create` is the library’s authoritative secret-key validator: **it returns 1 only when** `secp256k1_ec_seckey_verify` accepts the 32-byte input.",
      "file": "include/secp256k1_extrakeys.h",
      "highlight": [
        {
          "start": 158,
          "end": 173
        }
      ],
      "title": "",
      "id": "30543"
    },
    {
      "type": "highlight",
      "description": "`keypair_sec` always succeeds and simply copies the secret half out – callers already proved the key valid when they created the pair.",
      "file": "include/secp256k1_extrakeys.h",
      "highlight": [
        {
          "start": 175,
          "end": 186
        }
      ],
      "title": "",
      "id": "30544"
    },
    {
      "type": "highlight",
      "description": "`keypair_pub` extracts the conventional compressed/uncompressed public key so that older code can interoperate.",
      "file": "include/secp256k1_extrakeys.h",
      "highlight": [
        {
          "start": 188,
          "end": 199
        }
      ],
      "title": "",
      "id": "30545"
    },
    {
      "type": "highlight",
      "description": "`keypair_xonly_pub` is shorthand for the previous two helpers. The same `pk_parity` convention from `from_pubkey` is forwarded unchanged.",
      "file": "include/secp256k1_extrakeys.h",
      "highlight": [
        {
          "start": 201,
          "end": 219
        }
      ],
      "title": "",
      "id": "30546"
    },
    {
      "type": "highlight",
      "description": "`keypair_xonly_tweak_add` tweaks the secret key in place and refreshes the public half. Equivalently, you may call `keypair_xonly_pub` followed by `xonly_pubkey_tweak_add` – the two pathways are guaranteed to match.",
      "file": "include/secp256k1_extrakeys.h",
      "highlight": [
        {
          "start": 221,
          "end": 239
        }
      ],
      "title": "",
      "id": "30547"
    },
    {
      "type": "textOnly",
      "description": "You can now state every invariant: object sizes, when a `function` can fail, what its return value means, and how tweaking interacts with parity.  Later tours will assume this knowledge.",
      "title": "",
      "id": "30548"
    }
  ]
}