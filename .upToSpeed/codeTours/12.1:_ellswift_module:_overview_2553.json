{
  "title": "12.1: EllSwift Module: Overview",
  "id": "O0F8Srh3uxT7jysWSjziaStsSZNj9q0GVaEr4rSzlVU=",
  "originalId": 2553,
  "position": 54,
  "steps": [
    {
      "type": "textOnly",
      "description": "`ElligatorSwift` lets `secp256k1` keys masquerade as 64 random bytes. This short tour shows where the promise is declared, where the heavy lifting lives, and the key landmarks you’ll study next.",
      "title": "",
      "id": "30521"
    },
    {
      "type": "highlight",
      "description": "The introductory comment sketches the `(u,t) → x` mapping, explains the randomness goal, and records the minor deviations from the academic paper.  Keep lines 21-29 in mind—they describe the three candidate `X-coordinates` every decoder must test.",
      "file": "include/secp256k1_ellswift.h",
      "highlight": [
        {
          "start": 10,
          "end": 45
        }
      ],
      "title": "",
      "id": "30522"
    },
    {
      "type": "highlight",
      "description": "`encode()` takes a regular `pubkey` plus 32 bytes of entropy and returns a 64-byte camouflage string.",
      "file": "include/secp256k1_ellswift.h",
      "highlight": [
        {
          "start": 107,
          "end": 112
        }
      ],
      "title": "",
      "id": "30523"
    },
    {
      "type": "highlight",
      "description": "`decode()` reverses the process, delivering a `libsecp256k1_pubkey` so downstream code needn’t know ElligatorSwift exists.",
      "file": "include/secp256k1_ellswift.h",
      "highlight": [
        {
          "start": 123,
          "end": 128
        }
      ],
      "title": "",
      "id": "30524"
    },
    {
      "type": "highlight",
      "description": "`create()` folds key-generation and encode into one constant-time helper, using the secret key (plus optional `auxrnd`) as its entropy source.",
      "file": "include/secp256k1_ellswift.h",
      "highlight": [
        {
          "start": 154,
          "end": 159
        }
      ],
      "title": "",
      "id": "30525"
    },
    {
      "type": "highlight",
      "description": "`xdh()` keeps both parties inside encoding-space: given our `seckey`, both `64-byte pubkeys` and a `hash callback`, it outputs a uniform shared secret.",
      "file": "include/secp256k1_ellswift.h",
      "highlight": [
        {
          "start": 185,
          "end": 194
        }
      ],
      "title": "",
      "id": "30526"
    },
    {
      "type": "textOnly",
      "description": "Everything under those four prototypes is implemented in `src/modules/ellswift/main_impl.h`.  Let’s peek at the constants and the core algorithm it relies on.",
      "title": "",
      "id": "30527"
    },
    {
      "type": "highlight",
      "description": "`c1…c4` cache `(√−3 ± 1)/2` and its negations.  They appear throughout the algebra, so hard-coding them here removes repeated square-root work and keeps later formulas readable.",
      "file": "src/modules/ellswift/main_impl.h",
      "highlight": [
        {
          "start": 14,
          "end": 21
        }
      ],
      "title": "",
      "id": "30528"
    },
    {
      "type": "highlight",
      "description": "Lines 25-84 narrate how the paper’s high-level procedure is massaged into branch-free field arithmetic. This comment is the mathematical heart of decoding; the `C` below follows it line-by-line.",
      "file": "src/modules/ellswift/main_impl.h",
      "highlight": [
        {
          "start": 24,
          "end": 85
        }
      ],
      "title": "",
      "id": "30529"
    },
    {
      "type": "highlight",
      "description": "Finally the file publishes two ready-made hash helpers by assigning their **C-function** addresses to the public symbols we saw earlier—evidence we’re reading the implementation unit backing the API.",
      "file": "src/modules/ellswift/main_impl.h",
      "highlight": [
        {
          "start": 548,
          "end": 549
        }
      ],
      "title": "",
      "id": "30530"
    },
    {
      "type": "textOnly",
      "description": "You now know where the `API` lives, where the implementation lives, and the big pieces you’ll drill into next: the `√−3 constants` and the `xswiftec decoding engine`.",
      "title": "",
      "id": "30531"
    }
  ]
}