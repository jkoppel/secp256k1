{
  "title": "13.2: Public API – include/secp256k1_schnorrsig.h",
  "id": "qJ/SDZJ/DgYYL2OE0yw8dS3eoVq/qlbl5HD++WkgFnM=",
  "originalId": 2559,
  "position": 60,
  "steps": [
    {
      "type": "highlight",
      "description": "Everything in this header is explicitly framed as the `BIP-340` **Schnorr** variant – that standard dictates the domain-separated hashing rules and the 64-byte signature format.",
      "file": "include/secp256k1_schnorrsig.h",
      "highlight": [
        {
          "start": 11,
          "end": 14
        }
      ],
      "title": "",
      "id": "30450"
    },
    {
      "type": "highlight",
      "description": "The *generic* nonce callback seen by `ECDSA` (and other modules) accepts only the secret-key, `32-byte` message hash, an `\"algo\"` tag and an `attempt` counter.  There is **no public-key input**, so if callers accidentally mix key-pairs the same nonce may be re-used.",
      "file": "include/secp256k1.h",
      "highlight": [
        {
          "start": 78,
          "end": 101
        }
      ],
      "title": "",
      "id": "30451"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_nonce_function_hardened` extends that signature: it adds the 32-byte *x-only* public key (`xonly_pk32`) and drops the `attempt` field. Including the pubkey hardens schemes that bind the challenge to the key, avoiding disastrous nonce reuse when the wrong key is supplied.",
      "file": "include/secp256k1_schnorrsig.h",
      "highlight": [
        {
          "start": 41,
          "end": 50
        }
      ],
      "title": "",
      "id": "30452"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_nonce_function_bip340` is the library-provided implementation.  The comments (60-63) spell out BIP-340’s **tagged hash** requirement: callers must pass the literal tag `\"BIP0340/nonce\"` (length 13) so the hash state is domain-separated from every other use of SHA-256.",
      "file": "include/secp256k1_schnorrsig.h",
      "highlight": [
        {
          "start": 52,
          "end": 64
        }
      ],
      "title": "",
      "id": "30453"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_schnorrsig_extraparams` lets advanced callers tweak signing:\n- `magic` (lines 83-84) is a sentinel so the library can detect un-initialised structs.\n- `noncefp` overrides the default BIP-340 nonce generator.\n- `ndata` is forwarded to `noncefp` (often 32-byte aux-rand).\nThe macro `SECP256K1_SCHNORRSIG_EXTRAPARAMS_INIT` (88-93) zero-initialises everything safely.",
      "file": "include/secp256k1_schnorrsig.h",
      "highlight": [
        {
          "start": 82,
          "end": 93
        }
      ],
      "title": "",
      "id": "30454"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_schnorrsig_sign32` is the **preferred** helper. It only accepts 32-byte messages (usually a tagged hash), plus optional `aux_rand32`. If `aux_rand32` is `NULL` the procedure still works but falls back to all-zero randomness, exactly as described in BIP-340.",
      "file": "include/secp256k1_schnorrsig.h",
      "highlight": [
        {
          "start": 95,
          "end": 125
        }
      ],
      "title": "",
      "id": "30455"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_schnorrsig_sign` is an older alias slated for removal – identical behaviour, marked `SECP256K1_DEPRECATED`.",
      "file": "include/secp256k1_schnorrsig.h",
      "highlight": [
        {
          "start": 127,
          "end": 136
        }
      ],
      "title": "",
      "id": "30456"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_schnorrsig_sign_custom` opens every knob: variable-length `msg`, and the `extraparams` pointer.  Lines 144-149 show the library-endorsed equivalence – when `msglen==32` and you stuff `aux_rand32` into `extraparams.ndata`, the call is bit-for-bit identical to `sign32`.",
      "file": "include/secp256k1_schnorrsig.h",
      "highlight": [
        {
          "start": 138,
          "end": 166
        }
      ],
      "title": "",
      "id": "30457"
    },
    {
      "type": "highlight",
      "description": "Verification is a single entry-point: `secp256k1_schnorrsig_verify` returns **1 on success, 0 on failure**.  Give it the 64-byte signature, the message (any length), its length, and the *x-only* public key – nothing else is needed.",
      "file": "include/secp256k1_schnorrsig.h",
      "highlight": [
        {
          "start": 168,
          "end": 184
        }
      ],
      "title": "",
      "id": "30458"
    },
    {
      "type": "textOnly",
      "description": "With these surfaces you can now:\n- Hash your domain-separated message to 32 bytes and call `sign32`, or feed arbitrary bytes to `sign_custom`.\n- Supply fresh `aux_rand32` or leave it `NULL`.\n- Plug in a custom hardened `noncefp` via `extraparams` when deterministic or protocol-specific nonces are required.\n- Verify using `schnorrsig_verify`, checking for a non-zero return value.",
      "title": "",
      "id": "30459"
    }
  ]
}