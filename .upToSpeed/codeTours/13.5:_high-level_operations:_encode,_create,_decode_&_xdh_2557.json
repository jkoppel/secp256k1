{
  "title": "13.5: High-level Operations: encode, create, decode & xdh",
  "id": "uNUUoYxDYYwkA92kokWSKF4Q4MQwBxn7fBGcLbFneE0=",
  "originalId": 2557,
  "position": 58,
  "steps": [
    {
      "type": "textOnly",
      "description": "This tour follows every public `ElligatorSwift` flow down to the low-level math, pointing out where randomness, constant-time discipline and memory clearing are enforced.",
      "title": "",
      "id": "30497"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_ellswift_encode` opens by pulling the affine point out of the opaque public-key object. If the load fails the remainder of the function is skipped and the output is zeroed later.",
      "file": "src/modules/ellswift/main_impl.h",
      "highlight": [
        {
          "start": 399,
          "end": 406
        }
      ],
      "title": "",
      "id": "30498"
    },
    {
      "type": "highlight",
      "description": "A **BIP-340** tagged hash is primed to act as a deterministic RNG. It is seeded with the `compressed pubkey` (line 416) plus caller-supplied fresh randomness (line 423). The hash state will later be consumed in small chunks by the **elligator search**.",
      "file": "src/modules/ellswift/main_impl.h",
      "highlight": [
        {
          "start": 413,
          "end": 423
        }
      ],
      "title": "",
      "id": "30499"
    },
    {
      "type": "highlight",
      "description": "The helper `_elligatorswift_var` finds an encoding whose X/Y matches the point (line 426).  It writes `u` straight into `ell64[0..32]`, serialises `t` into the upper half (line 427) and returns.  If the earlier `pubkey_load` had failed, the buffer is wiped (lines 431-432).",
      "file": "src/modules/ellswift/main_impl.h",
      "highlight": [
        {
          "start": 425,
          "end": 433
        }
      ],
      "title": "",
      "id": "30500"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_ellswift_create` starts from a secret scalar.  A constant-time helper converts it to an affine point (line 466).  The resulting public coordinates are explicitly normalised (lines 468-469) before they become public data.",
      "file": "src/modules/ellswift/main_impl.h",
      "highlight": [
        {
          "start": 450,
          "end": 470
        }
      ],
      "title": "",
      "id": "30501"
    },
    {
      "type": "highlight",
      "description": "The RNG seed is the secret key, a 32-byte zero block and\t6optionally\t6`auxrnd32`.  The hash object is de-classified only after the secret has been absorbed (line 476), preventing later side-channels from seeing key material.",
      "file": "src/modules/ellswift/main_impl.h",
      "highlight": [
        {
          "start": 471,
          "end": 478
        }
      ],
      "title": "",
      "id": "30502"
    },
    {
      "type": "highlight",
      "description": "Encoding proceeds just like in `encode` (line 480). On failure the destination is conditionally zeroed in constant time (line 483) and the temporary scalar is scrubbed (line 484).",
      "file": "src/modules/ellswift/main_impl.h",
      "highlight": [
        {
          "start": 480,
          "end": 485
        }
      ],
      "title": "",
      "id": "30503"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_ellswift_decode` is a minimal wrapper.  It parses `u` and `t`, normalises `t`, reconstructs the point with `_swiftec_var` and stores it back through `pubkey_save`.",
      "file": "src/modules/ellswift/main_impl.h",
      "highlight": [
        {
          "start": 489,
          "end": 500
        }
      ],
      "title": "",
      "id": "30504"
    },
    {
      "type": "highlight",
      "description": "Earlier you saw this `function-pointer typedef`. It defines the shape of the hashing callback that will turn a shared X-coordinate into application-specific secret material.",
      "file": "include/secp256k1_ellswift.h",
      "highlight": [
        {
          "start": 62,
          "end": 69
        }
      ],
      "title": "",
      "id": "30505"
    },
    {
      "type": "highlight",
      "description": "**ellswift_xdh_hash_function_prefix** implements the general pattern SHA256(prefix64‖ell_a64‖ell_b64‖x32).  The 64-byte prefix is passed through the `data` pointer.",
      "file": "src/modules/ellswift/main_impl.h",
      "highlight": [
        {
          "start": 504,
          "end": 512
        }
      ],
      "title": "",
      "id": "30506"
    },
    {
      "type": "highlight",
      "description": "`ellswift_xdh_hash_function_bip324` hard-codes a **BIP-324** midstate and omits the prefix, giving the exact construction mandated by the **spec**.",
      "file": "src/modules/ellswift/main_impl.h",
      "highlight": [
        {
          "start": 533,
          "end": 542
        }
      ],
      "title": "",
      "id": "30507"
    },
    {
      "type": "highlight",
      "description": "Both functions are published as global constants so callers can hand them directly to the `XDH API`.",
      "file": "src/modules/ellswift/main_impl.h",
      "highlight": [
        {
          "start": 548,
          "end": 549
        }
      ],
      "title": "",
      "id": "30508"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_ellswift_xdh` begins by choosing the remote party’s 64-byte encoding (line 567) and converting it to the fractional X coordinate `xn/xd` (lines 568-571).",
      "file": "src/modules/ellswift/main_impl.h",
      "highlight": [
        {
          "start": 551,
          "end": 571
        }
      ],
      "title": "",
      "id": "30509"
    },
    {
      "type": "highlight",
      "description": "The private scalar is loaded with overflow tracking (line 573).  If it is zero or too large, the code substitutes the value 1 in constant time (lines 574-575).  An `x-only constant-time multiply` then produces the shared X coordinate (lines 578-580).",
      "file": "src/modules/ellswift/main_impl.h",
      "highlight": [
        {
          "start": 572,
          "end": 581
        }
      ],
      "title": "",
      "id": "30510"
    },
    {
      "type": "highlight",
      "description": "Finally the caller-supplied **hash function** is invoked (line 583).  All **transient secrets**—the shared `X`, the field element and the scalar—are wiped (lines 585-587).  The **return value** is forced to zero if an invalid `scalar` had to be masked (line 589).",
      "file": "src/modules/ellswift/main_impl.h",
      "highlight": [
        {
          "start": 582,
          "end": 589
        }
      ],
      "title": "",
      "id": "30511"
    },
    {
      "type": "textOnly",
      "description": "Following the **public interfaces** you can now map each operation to its `internal helpers` and see the systematic use of **tagged hashes**, **constant-time fall-backs**, and **memory clearing** that protect the underlying mathematics in production code.",
      "title": "",
      "id": "30512"
    }
  ]
}