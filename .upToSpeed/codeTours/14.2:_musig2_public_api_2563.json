{
  "title": "14.2: MuSig2 Public API",
  "id": "LGly5HydqYJC2MlTlu5Hr/sy7fypVoIS210nuBmG98w=",
  "originalId": 2563,
  "position": 64,
  "steps": [
    {
      "type": "textOnly",
      "description": "This tour dissects the `safety contracts` that protect `MuSig2` users from subtle misuse and shows how the opaque structs and API families combine into the two-round protocol.",
      "title": "",
      "id": "30393"
    },
    {
      "type": "highlight",
      "description": "All persistent state lives in `fixed-size opaque arrays`. Size guarantees (lines 40, 49, 65, 74, 84, 93) let callers allocate on-stack while hiding layout so user code cannot forge objects. Only `secnonce` (lines 51-57) carries a **bright-red warning**: copying it can leak the `secret key` through `nonce reuse`.",
      "file": "include/secp256k1_musig.h",
      "highlight": [
        {
          "start": 38,
          "end": 99
        }
      ],
      "title": "",
      "id": "30394"
    },
    {
      "type": "highlight",
      "description": "The implementation confirms the advertised size.  A session packs seven fields (line 136-143) into exactly 133 bytes before being wrapped in the opaque `secp256k1_musig_session`.",
      "file": "src/modules/musig/session_impl.h",
      "highlight": [
        {
          "start": 134,
          "end": 158
        }
      ],
      "title": "",
      "id": "30395"
    },
    {
      "type": "highlight",
      "description": "`secnonce` objects contain a 4-byte magic tag. When the flag is true (`line 80`) they are wiped in constant-time; afterwards only the harmless `magic` and embedded pubkey are declassified. A second load therefore fails, enforcing the **‘use-once’** rule at run-time.",
      "file": "src/modules/musig/session_impl.h",
      "highlight": [
        {
          "start": 79,
          "end": 88
        }
      ],
      "title": "",
      "id": "30396"
    },
    {
      "type": "highlight",
      "description": "**Key aggregation** kicks things off. The comment (lines 180-186) stresses that `pubkey` order changes the output and suggests sorting first to stay deterministic across devices.",
      "file": "include/secp256k1_musig.h",
      "highlight": [
        {
          "start": 178,
          "end": 188
        }
      ],
      "title": "",
      "id": "30397"
    },
    {
      "type": "highlight",
      "description": "After aggregation the same `keyagg_cache` is threaded through the tweak helpers so later signing still works. The in-line pseudocode (lines 237-242) sketches the dataflow: `pubkey_agg` → `pubkey_get` → `tweak helper`.",
      "file": "include/secp256k1_musig.h",
      "highlight": [
        {
          "start": 233,
          "end": 244
        }
      ],
      "title": "",
      "id": "30398"
    },
    {
      "type": "highlight",
      "description": "`x-only tweaking` shows the same pipeline but with **Taproot-style verification** (line 284) so wallet software can independently confirm the tweak.",
      "file": "include/secp256k1_musig.h",
      "highlight": [
        {
          "start": 277,
          "end": 286
        }
      ],
      "title": "",
      "id": "30399"
    },
    {
      "type": "highlight",
      "description": "Nonce generation is the most dangerous step, so the header lists three **hard rules**: 1️⃣ unique, secret `session_secrand32`; 2️⃣ optionally bind `seckey/msg/agg pk` for misuse-resistance; 3️⃣ never copy the `secnonce`.",
      "file": "include/secp256k1_musig.h",
      "highlight": [
        {
          "start": 311,
          "end": 334
        }
      ],
      "title": "",
      "id": "30400"
    },
    {
      "type": "highlight",
      "description": "The implementation enforces them.  A zero `session_secrand32` is rejected (line 479) and the buffer is zeroed on return (lines 491-493) so it cannot be reused accidentally.",
      "file": "src/modules/musig/session_impl.h",
      "highlight": [
        {
          "start": 470,
          "end": 493
        }
      ],
      "title": "",
      "id": "30401"
    },
    {
      "type": "highlight",
      "description": "The counter-based variant offers a fallback when randomness is scarce.  **Rule 1** (lines 389-394) forbids repeating counters across devices; **rules 2 & 3** echo the original guidance.",
      "file": "include/secp256k1_musig.h",
      "highlight": [
        {
          "start": 386,
          "end": 403
        }
      ],
      "title": "",
      "id": "30402"
    },
    {
      "type": "highlight",
      "description": "Nonce aggregation can be delegated to an untrusted party. The worst a dishonest aggregator can do is make the final signature invalid (lines 443-445) – no secret material is revealed.",
      "file": "include/secp256k1_musig.h",
      "highlight": [
        {
          "start": 436,
          "end": 445
        }
      ],
      "title": "",
      "id": "30403"
    },
    {
      "type": "highlight",
      "description": "`nonce_process` turns the aggregate nonce, message and `keyagg_cache` into a `session struct`. All later **signing and verification functions** must reference the exact same cache to avoid cross-session mix-ups.",
      "file": "include/secp256k1_musig.h",
      "highlight": [
        {
          "start": 462,
          "end": 473
        }
      ],
      "title": "",
      "id": "30404"
    },
    {
      "type": "highlight",
      "description": "`partial_sign` consumes the `secnonce` exactly once and warns that a copied structure will fail the **magic check** (lines 485-488). The **doc string** recommends verifying the produced share before forwarding it.",
      "file": "include/secp256k1_musig.h",
      "highlight": [
        {
          "start": 482,
          "end": 499
        }
      ],
      "title": "",
      "id": "30405"
    },
    {
      "type": "highlight",
      "description": "Here the promise is honoured: `load()` verifies the magic (line 679) and the very next line wipes the struct, permanently disabling reuse.",
      "file": "src/modules/musig/session_impl.h",
      "highlight": [
        {
          "start": 677,
          "end": 683
        }
      ],
      "title": "",
      "id": "30406"
    },
    {
      "type": "highlight",
      "description": "`partial_sig_verify`’s three bullet points prevent mix-and-match attacks by demanding the exact `cache`, `pubkey` and `pubnonce` used throughout the session.",
      "file": "include/secp256k1_musig.h",
      "highlight": [
        {
          "start": 527,
          "end": 536
        }
      ],
      "title": "",
      "id": "30407"
    },
    {
      "type": "highlight",
      "description": "The verifier enforces those rules and re-computes R = nonce₀ + b·nonce₁ before checking that −s·G + e·μ·PK + R equals ∞ – the Schnorr equation specialised to `MuSig2`.",
      "file": "src/modules/musig/session_impl.h",
      "highlight": [
        {
          "start": 760,
          "end": 796
        }
      ],
      "title": "",
      "id": "30408"
    },
    {
      "type": "highlight",
      "description": "`partial_sig_agg` joins the shares but does **not** assert validity (line 566) – the final **Schnorr verification** still has to run.",
      "file": "include/secp256k1_musig.h",
      "highlight": [
        {
          "start": 564,
          "end": 575
        }
      ],
      "title": "",
      "id": "30409"
    },
    {
      "type": "highlight",
      "description": "Implementation detail: all `s-components` are added into `session_i.s_part` (lines 812-818) and concatenated with the final `nonce` to produce a standard `64-byte Schnorr signature` (lines 819-821).",
      "file": "src/modules/musig/session_impl.h",
      "highlight": [
        {
          "start": 799,
          "end": 821
        }
      ],
      "title": "",
      "id": "30410"
    },
    {
      "type": "highlight",
      "description": "Any host can now call `schnorrsig_verify`.  A single familiar API completes the protocol; if verification fails, some share was invalid or an earlier rule was ignored.",
      "file": "include/secp256k1_schnorrsig.h",
      "highlight": [
        {
          "start": 168,
          "end": 178
        }
      ],
      "title": "",
      "id": "30411"
    },
    {
      "type": "textOnly",
      "description": "Putting it all together – the two-round MuSig2 flow:\n1️⃣  Every signer: `nonce_gen` ➜ send pubnonce.\n    Aggregator: `nonce_agg`.\n    Everyone:   `nonce_process`.\n2️⃣  Every signer: `partial_sign` ➜ send `partial_sig` (optionally verify peers’ shares).\n    Anyone:      `partial_sig_agg` ➜ Schnorr verify.\nBy respecting each safety note the caller avoids nonce reuse, mix-ups and invalid tweaks, ending with a **BIP-340**-compatible signature.",
      "title": "",
      "id": "30412"
    }
  ]
}