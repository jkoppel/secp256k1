{
  "title": "2.4: 5×52 Backend – 52-bit Limb Representation",
  "id": "7WzGcNyZKN7xRPC3KX2y60aevijg8E9dh0OXK0nHV5Y=",
  "originalId": 2505,
  "position": 9,
  "steps": [
    {
      "type": "textOnly",
      "description": "Let’s take a focused tour of the `64-bit` field backend (`5 × 52-bit` limb layout) that `libsecp256k1` uses when `128-bit` wide multiplication is available.",
      "title": "",
      "id": "29949"
    },
    {
      "type": "highlight",
      "description": "A field element is five `64-bit` words that hold `52` bits each.  Lines 18-31 set the exact **limb/magnitude bounds** so **static analysis** can prove every operation stays inside them.",
      "file": "src/field_5x52.h",
      "highlight": [
        {
          "start": 12,
          "end": 33
        }
      ],
      "title": "",
      "id": "29950"
    },
    {
      "type": "highlight",
      "description": "`normalize()` runs a 52-bit carry chain (**51-55**) then—at most once—adds the modular constant and carries again (**61-70**).  The `VERIFY_CHECK` on **58/72** proves only one extra reduction can ever be needed.",
      "file": "src/field_5x52_impl.h",
      "highlight": [
        {
          "start": 43,
          "end": 78
        }
      ],
      "title": "",
      "id": "29951"
    },
    {
      "type": "highlight",
      "description": "`normalize_weak()` performs the same first-pass carries but skips the final subtraction, giving magnitude 1 without the cost of a full reduction—handy for intermediate temporaries.",
      "file": "src/field_5x52_impl.h",
      "highlight": [
        {
          "start": 80,
          "end": 97
        }
      ],
      "title": "",
      "id": "29952"
    },
    {
      "type": "highlight",
      "description": "`get_bounds()` fabricates a limb vector that sits exactly on the allowed edge for a chosen magnitude. The test-suite compares results against this helper to guarantee arithmetic never exceeds proven limits.",
      "file": "src/field_5x52_impl.h",
      "highlight": [
        {
          "start": 35,
          "end": 41
        }
      ],
      "title": "",
      "id": "29953"
    },
    {
      "type": "highlight",
      "description": "`VERIFY_BITS_128` wraps `secp256k1_u128_check_bits` so every 128-bit accumulator is audited at compile-time for the claimed bit-width.",
      "file": "src/field_5x52_int128_impl.h",
      "highlight": [
        {
          "start": 15,
          "end": 18
        }
      ],
      "title": "",
      "id": "29954"
    },
    {
      "type": "highlight",
      "description": "`mul_inner` loads the five limbs, defines the 52-bit mask `M` and the reduction constant `R = 2^256 mod p`, then asserts its pre-conditions (24-33) before any heavy work begins.",
      "file": "src/field_5x52_int128_impl.h",
      "highlight": [
        {
          "start": 18,
          "end": 46
        }
      ],
      "title": "",
      "id": "29955"
    },
    {
      "type": "highlight",
      "description": "First accumulation block: `c/d` gather cross-products for `p3` & `p8`, `line 56` extracts a `52-bit` limb, and `line 61` continues with the next layer\u0015128-bit temporaries so no precision is lost.",
      "file": "src/field_5x52_int128_impl.h",
      "highlight": [
        {
          "start": 43,
          "end": 71
        }
      ],
      "title": "",
      "id": "29956"
    },
    {
      "type": "highlight",
      "description": "Tail write-out: `r[3]` comes from `c` after one last split (145-146) and `r[4]` (149-150) adds the final carry `t4`, ending with just 49 significant bits\t6ready for a cheap `normalize()`.",
      "file": "src/field_5x52_int128_impl.h",
      "highlight": [
        {
          "start": 145,
          "end": 152
        }
      ],
      "title": "",
      "id": "29957"
    },
    {
      "type": "highlight",
      "description": "Backend selection happens at compile time. If the compiler or platform offers `128-bit` wide multiplication, `SECP256K1_WIDEMUL_INT128` is defined and the `5×52` code paths we’ve seen are compiled; otherwise the library falls back to the `10×26` (32-bit carry) backend.",
      "file": "src/util.h",
      "highlight": [
        {
          "start": 303,
          "end": 332
        }
      ],
      "title": "",
      "id": "29958"
    }
  ]
}