{
  "title": "3.1: Field Arithmetic: Overview",
  "id": "byJ5kERUSD7qBdZBwIwDlkCMDYJqSs68UFyNjxDsy2g=",
  "originalId": 2502,
  "position": 6,
  "steps": [
    {
      "type": "highlight",
      "description": "Two invariants travel with every field element. Lines 24-26 define the **magnitude** (0‥32) and **normalized** (0/1) flags, while the surrounding comment motivates them and clarifies they are independent of the chosen back-end.",
      "file": "src/field.h",
      "highlight": [
        {
          "start": 12,
          "end": 30
        }
      ],
      "title": "",
      "id": "29941"
    },
    {
      "type": "highlight",
      "description": "A single compile-time switch selects the representation.  Defining `SECP256K1_WIDEMUL_INT128` activates the 5×52 code; `SECP256K1_WIDEMUL_INT64` activates the 10×26 code.  Nothing else in the project needs to know which one was picked.",
      "file": "src/field.h",
      "highlight": [
        {
          "start": 40,
          "end": 46
        }
      ],
      "title": "",
      "id": "29942"
    },
    {
      "type": "highlight",
      "description": "Inside the `10×26` variant the value is stored as ten `32-bit` limbs (`line 22`). Each limb effectively carries `26` bits, giving a `base-2^26` positional system that matches `32-bit` arithmetic strengths.",
      "file": "src/field_10x26.h",
      "highlight": [
        {
          "start": 12,
          "end": 22
        }
      ],
      "title": "",
      "id": "29943"
    },
    {
      "type": "highlight",
      "description": "Constants written in the usual eight-word big-endian form are unpacked by `SECP256K1_FE_CONST_INNER`.  Note how the **bit-shifts and masks** (lines 38-47) interleave the bits across overlapping 26-bit limbs.",
      "file": "src/field_10x26.h",
      "highlight": [
        {
          "start": 37,
          "end": 48
        }
      ],
      "title": "",
      "id": "29944"
    },
    {
      "type": "highlight",
      "description": "The alternative `5×52` back-end opts for five `64-bit` limbs (line 22), each conveying `52` effective bits.  This layout leans on wide `128-bit` intermediates available on modern `64-bit` CPUs.",
      "file": "src/field_5x52.h",
      "highlight": [
        {
          "start": 12,
          "end": 22
        }
      ],
      "title": "",
      "id": "29945"
    },
    {
      "type": "highlight",
      "description": "Its `unpack` macro performs a different bit-dance, fanning the input across far wider limbs (lines 38-42).  The idea is identical: transform eight 32-bit words into the limb layout expected by the back-end.",
      "file": "src/field_5x52.h",
      "highlight": [
        {
          "start": 37,
          "end": 43
        }
      ],
      "title": "",
      "id": "29946"
    },
    {
      "type": "highlight",
      "description": "`field_impl.h` echoes the choice once more, `#including` exactly one of `field_5x52_impl.h` or `field_10x26_impl.h`.  All inline helpers declared earlier will therefore compile down to the matching low-level routines.",
      "file": "src/field_impl.h",
      "highlight": [
        {
          "start": 13,
          "end": 19
        }
      ],
      "title": "",
      "id": "29947"
    },
    {
      "type": "textOnly",
      "description": "Higher layers invoke generic helpers such as `secp256k1_fe_mul`. Through the aliases in `field.h` and the conditional includes shown above, those calls transparently resolve to either the 5×52 or 10×26 implementation. The result is a pluggable, platform-tuned field arithmetic layer that keeps the rest of the codebase completely agnostic of the chosen representation.",
      "title": "",
      "id": "29948"
    }
  ]
}