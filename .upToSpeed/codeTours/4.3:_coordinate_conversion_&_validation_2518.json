{
  "title": "4.3: Coordinate Conversion & Validation",
  "id": "U1DBvwoJtD4UfvNl0WibN4axPeFAHD5p+xnevnspvvA=",
  "originalId": 2518,
  "position": 19,
  "steps": [
    {
      "type": "textOnly",
      "description": "This tour revisits the helpers that shuttle points between Jacobian (`gej`) and affine (`ge`) coordinates while guarding every mathematical invariant. Two design threads run through all of them:\n- `VERIFY` macros pin every field element inside its magnitude budget so later code can skip redundant checks.\n- Constant-time variants avoid secret-dependent flow; their `\"_var\"` siblings trade that guarantee for raw speed.",
      "title": "",
      "id": "30036"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_ge_verify` re-certifies an *affine* point. After generic field checks (lines 79-80) it enforces per-coordinate magnitude limits (81-82) and the boolean nature of the `infinity` flag (83).",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 78,
          "end": 85
        }
      ],
      "title": "",
      "id": "30037"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_gej_verify` extends the same discipline to the Jacobian triple (`x`,`y`,`z`).  A third magnitude bound appears at line 93 so that any subsequent normalisation step can assume enough head-room.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 87,
          "end": 96
        }
      ],
      "title": "",
      "id": "30038"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_ge_set_xy` is the minimal affine constructor: copy the provided field elements, mark the point non-infinite, then immediately call the verifier again (140) to keep the contract intact.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 132,
          "end": 141
        }
      ],
      "title": "",
      "id": "30039"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_ge_set_gej` converts **Jacobian → affine** in constant time.  A full field inverse (164) turns z into 1/z; squaring and cubing deliver 1/z² and 1/z³ (165-168).  Finally z is reset to 1 (169) so the *source* point now also represents affine coordinates.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 159,
          "end": 175
        }
      ],
      "title": "",
      "id": "30040"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_ge_set_gej_var` performs the same algebra but:\n- bails out early when the input is infinity (181-184),\n- uses the quicker, timing-leaky `fe_inv_var` (186).\nThe remaining steps mirror the constant-time path.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 177,
          "end": 196
        }
      ],
      "title": "",
      "id": "30041"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_ge_set_all_gej` amortises inversion cost over a whole array. Lines 214-218 build the cumulative product z₀·z₁·…·zₙ, invert it **once**, then the backward sweep (219-224) recovers every individual 1/zi. Each point finishes with `ge_set_gej_zinv` (225-227). All operations follow constant-time rules.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 198,
          "end": 227
        }
      ],
      "title": "",
      "id": "30042"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_ge_set_all_gej_var` repeats the trick with the variable-time inverse (262) and skips infinities on the fly (246-258). Identical maths, different timing guarantees.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 236,
          "end": 287
        }
      ],
      "title": "",
      "id": "30043"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_ge_table_set_globalz` lets an entire lookup table share one common z.  Walking the table backward (307-312) multiplies each entry by the accumulated ratio so that after the loop every stored (x,y) is again affine under the new global denominator.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 289,
          "end": 313
        }
      ],
      "title": "",
      "id": "30044"
    },
    {
      "type": "highlight",
      "description": "**`secp256k1_gej_rescale`** demonstrates **projective homogeneity**: scaling by *s* multiplies *x* by *s*², *y* by *s*³, and *z* by *s* (868-872)—changing representation but not the represented point.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 861,
          "end": 873
        }
      ],
      "title": "",
      "id": "30045"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_ge_is_infinity` is just a verified accessor, yet its cheapness lets higher-level code treat the infinity flag as a trustworthy branch condition.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 143,
          "end": 147
        }
      ],
      "title": "",
      "id": "30046"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_ge_is_valid_var` finally checks that an affine point still satisfies `y`² = `x`³ + 7 (454-457).  Together with the earlier magnitude tests this forms a complete on-curve guarantee.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 446,
          "end": 458
        }
      ],
      "title": "",
      "id": "30047"
    },
    {
      "type": "textOnly",
      "description": "These helpers encapsulate all inversion tricks, magnitude bookkeeping, and constant-time considerations so that subsequent algorithms can move freely between coordinate systems without re-implementing safety checks.",
      "title": "",
      "id": "30048"
    }
  ]
}