{
  "title": "4.4: 32-bit Backend (8×32 limbs)",
  "id": "ygcm7DDqKg4gkNfJVggugBhF0MTeJwN6bdAbYIHjCes=",
  "originalId": 2510,
  "position": 14,
  "steps": [
    {
      "type": "textOnly",
      "description": "We will revisit scalar arithmetic, this time in the `8×32-bit` backend used on 32-bit or otherwise \"narrow\" targets.  Along the way we will contrast it with the `4×64` implementation you have already seen.",
      "title": "",
      "id": "30460"
    },
    {
      "type": "highlight",
      "description": "Each scalar is stored as eight 32-bit limbs – twice as many as in the 64-bit backend – yet the public type name (`secp256k1_scalar`) is unchanged. Line 17 provides a `CONST` macro so constant scalars can be written once regardless of backend.",
      "file": "src/scalar_8x32.h",
      "highlight": [
        {
          "start": 12,
          "end": 18
        }
      ],
      "title": "",
      "id": "30461"
    },
    {
      "type": "highlight",
      "description": "Before any scalar code is compiled, `util.h` decides which wide-multiplication strategy to use.  \n- If the compiler offers unsigned `__int128` (line 314) it is enabled.  \n- Otherwise the build falls back to an emulated 128-bit struct (or even to pure 64-bit arithmetic).  \nThis compile-time path replaces the tiny **HAVE___INT128** checks you may have seen in older codebases.",
      "file": "src/util.h",
      "highlight": [
        {
          "start": 301,
          "end": 332
        }
      ],
      "title": "",
      "id": "30462"
    },
    {
      "type": "highlight",
      "description": "The heart of **8×32** reduction is `secp256k1_scalar_reduce_512`.  The first stage (lines 414-440 shown) accumulates 32-bit products into a 96-bit ``(`c0`,`c1`,`c2`)`` accumulator.  Because each limb is smaller, more terms and more explicit carries are needed than in the 4×64 version.",
      "file": "src/scalar_8x32_impl.h",
      "highlight": [
        {
          "start": 404,
          "end": 444
        }
      ],
      "title": "",
      "id": "30463"
    },
    {
      "type": "highlight",
      "description": "For comparison: the final 258→256-bit step of the 4×64 reduction.  Notice how it can store the running carry in one `uint128` variable (`c128`) instead of three 32-bit temporaries.  The algorithmic idea is identical – add `p + k·N` – but the carry propagation is simpler thanks to the wider limbs.",
      "file": "src/scalar_4x64_impl.h",
      "highlight": [
        {
          "start": 658,
          "end": 676
        }
      ],
      "title": "",
      "id": "30464"
    },
    {
      "type": "highlight",
      "description": "`scalar_mul_shift_var` performs a right-shift of a 512-bit product by an arbitrary amount. Rather than calling a helper such as `scalar_shr_int` (present only in older test-only code) the shift is open-coded:\n- line 693 computes the 512-bit product\n- lines 696-703 extract the desired 256-bit window with limb- and bit-precision\n- line 704 implements the embedded constant-time rounding bit",
      "file": "src/scalar_8x32_impl.h",
      "highlight": [
        {
          "start": 683,
          "end": 707
        }
      ],
      "title": "",
      "id": "30465"
    },
    {
      "type": "textOnly",
      "description": "Why so much effort? Many embedded chips have no 128-bit type and treat 64-bit multiplication as a library call. By basing the main data path on 32-bit limbs but still *optionally* using 64- or 128-bit temporaries (under the `SECP256K1_WIDEMUL_*` configuration) `libsecp256k1` can compile efficiently from tiny 32-bit MCUs up to high-end servers without changing source code.",
      "title": "",
      "id": "30466"
    },
    {
      "type": "textOnly",
      "description": "Summary\n\n- Same constant-time algorithms as `4×64`: add-reduce, Barrett-like two-step `512→256` reduction, etc.\n\n- Representation difference (`8×32` vs `4×64`) merely trades limb count for limb width.\n\n- Extra carry words appear in reduction and multiplication macros.\n\n- Build system detects at compile time whether fast `__int128` intermediates are available; otherwise a portable struct or pure `64-bit` path is used.\n\nThe result is functional parity with maximal portability.",
      "title": "",
      "id": "30467"
    }
  ]
}