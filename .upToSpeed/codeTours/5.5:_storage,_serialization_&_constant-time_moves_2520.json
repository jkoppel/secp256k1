{
  "title": "5.5: Storage, Serialization & Constant-Time Moves",
  "id": "FuF1BRuzIKpuJKSnogVcBIeyn8axMuYp6Gmfj5GZ7C4=",
  "originalId": 2520,
  "position": 21,
  "steps": [
    {
      "type": "textOnly",
      "description": "Every `affine` or `Jacobian` point eventually has to leave the `field-element structs`—either to sit in a **pre-computed table**, to be hashed, or to be discarded securely.  The following tour walks through the helpers that make those transitions safe, canonical, and **constant-time**.",
      "title": "",
      "id": "30070"
    },
    {
      "type": "highlight",
      "description": "`ge_to_storage` writes a point into the 64-byte table format. Both coordinates are first normalised (`lines 883-885`) so tables never hold non-canonical values.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 877,
          "end": 888
        }
      ],
      "title": "",
      "id": "30071"
    },
    {
      "type": "highlight",
      "description": "`ge_from_storage` is the mirror image: copy the two 32-byte words back into field elements and clear the infinity flag.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 890,
          "end": 895
        }
      ],
      "title": "",
      "id": "30072"
    },
    {
      "type": "highlight",
      "description": "`ge_to_bytes` turns exactly the same storage layout into a raw byte buffer.  The **STATIC_ASSERT** on lines 978-981 guarantees at compile-time that the struct really is 64 bytes so the `memcpy` is always safe.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 975,
          "end": 984
        }
      ],
      "title": "",
      "id": "30073"
    },
    {
      "type": "highlight",
      "description": "`ge_from_bytes` round-trips the buffer by first copying into a temporary storage struct and then using `ge_from_storage`.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 987,
          "end": 993
        }
      ],
      "title": "",
      "id": "30074"
    },
    {
      "type": "highlight",
      "description": "The `_ext` variants add a canonical all-zero encoding for the point at infinity—useful when writing to scratch buffers that have no spare flag.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 995,
          "end": 1009
        }
      ],
      "title": "",
      "id": "30075"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_gej_cmov` performs constant-time conditional assignment by cmov’ing each coordinate and bit-twiddling the infinity flag.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 898,
          "end": 907
        }
      ],
      "title": "",
      "id": "30076"
    },
    {
      "type": "highlight",
      "description": "A matching helper exists for the `64-byte` storage objects, so table look-ups stay constant-time as well.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 910,
          "end": 913
        }
      ],
      "title": "",
      "id": "30077"
    },
    {
      "type": "highlight",
      "description": "When secret points are no longer needed they are wiped with `secp256k1_memclear()`. Both Jacobian and affine structs have dedicated `clear` helpers that zero every byte.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 339,
          "end": 345
        }
      ],
      "title": "",
      "id": "30078"
    },
    {
      "type": "highlight",
      "description": "Subgroup checks: in production (`cofactor 1`) the helper simply returns true, but under `EXHAUSTIVE_TEST` builds it runs a small scalar-multiplication ladder (`lines 930-938`) to detect invalid points.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 924,
          "end": 945
        }
      ],
      "title": "",
      "id": "30079"
    },
    {
      "type": "textOnly",
      "description": "With these primitives you can trace a point as it moves between **RAM**, `constant tables` and `byte buffers`—always in canonical form, always constant-time, and wiped when finished.",
      "title": "",
      "id": "30080"
    }
  ]
}