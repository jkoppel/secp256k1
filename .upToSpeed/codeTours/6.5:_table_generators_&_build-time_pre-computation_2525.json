{
  "title": "6.5: Table generators & build-time pre-computation",
  "id": "XIAurGFvV9jsMuy8ZKOi/rv9mbbIe9n/E9hepjSudB0=",
  "originalId": 2525,
  "position": 26,
  "steps": [
    {
      "type": "textOnly",
      "description": "`libsecp256k1`’s huge lookup tables do not live in the source tree; they are built, dumped as `C` arrays, and then compiled like any other code.  We first look at the two in-memory table builders.",
      "title": "",
      "id": "30243"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_ecmult_gen_compute_table()` walks over powers of two of the generator, fills a temporary array and finally writes into an output buffer supplied by the caller.",
      "file": "src/ecmult_gen_compute_table_impl.h",
      "highlight": [
        {
          "start": 17,
          "end": 24
        }
      ],
      "title": "",
      "id": "30244"
    },
    {
      "type": "highlight",
      "description": "Lines 91-100 convert every **Jacobian** point to the packed `secp256k1_ge_storage` format – the exact 64-byte records later baked into the executable.",
      "file": "src/ecmult_gen_compute_table_impl.h",
      "highlight": [
        {
          "start": 91,
          "end": 100
        }
      ],
      "title": "",
      "id": "30245"
    },
    {
      "type": "highlight",
      "description": "For the ordinary `pre_g` tables the computation is simpler: a double-and-add loop produces `ECMULT_TABLE_SIZE(window_g)=2^(WINDOW_G−2)` entries.",
      "file": "src/ecmult_compute_table_impl.h",
      "highlight": [
        {
          "start": 16,
          "end": 34
        }
      ],
      "title": "",
      "id": "30246"
    },
    {
      "type": "textOnly",
      "description": "Those builders are never part of the `public library`. Instead they are included in two tiny helper programs that run once during compilation.",
      "title": "",
      "id": "30247"
    },
    {
      "type": "highlight",
      "description": "The `generator-table` program is a standalone translation unit; it pulls in the `builder` header and little else.",
      "file": "src/precompute_ecmult_gen.c",
      "highlight": [
        {
          "start": 16,
          "end": 20
        }
      ],
      "title": "",
      "id": "30248"
    },
    {
      "type": "highlight",
      "description": "main() opens `src/precomputed_ecmult_gen.c` and defines the `S(…)` macro that will turn every 16-word tuple into a **SECP256K1_GE_STORAGE_CONST** literal.",
      "file": "src/precompute_ecmult_gen.c",
      "highlight": [
        {
          "start": 71,
          "end": 80
        }
      ],
      "title": "",
      "id": "30249"
    },
    {
      "type": "highlight",
      "description": "`print_table()` is invoked for each configuration; it prints a giant `#elif` block containing the freshly computed constants for `secp256k1_ecmult_gen_prec_table`.",
      "file": "src/precompute_ecmult_gen.c",
      "highlight": [
        {
          "start": 81,
          "end": 90
        }
      ],
      "title": "",
      "id": "30250"
    },
    {
      "type": "highlight",
      "description": "When `EXHAUSTIVE_TEST_ORDER` is off the generated table is declared `const` – it lands in read-only data.  Exhaustive test builds get a mutable buffer that will be filled at run-time.",
      "file": "src/precomputed_ecmult_gen.h",
      "highlight": [
        {
          "start": 18,
          "end": 22
        }
      ],
      "title": "",
      "id": "30251"
    },
    {
      "type": "highlight",
      "description": "The second helper, for the generic **pre_g tables**, follows the same pattern and only pulls in `ecmult_compute_table_impl.h`.",
      "file": "src/precompute_ecmult.c",
      "highlight": [
        {
          "start": 16,
          "end": 21
        }
      ],
      "title": "",
      "id": "30252"
    },
    {
      "type": "highlight",
      "description": "`main()` writes `include lines`, defines the same `S` macro, guards against mismatched `WINDOW_G` and then appends the `tables`.",
      "file": "src/precompute_ecmult.c",
      "highlight": [
        {
          "start": 69,
          "end": 78
        }
      ],
      "title": "",
      "id": "30253"
    },
    {
      "type": "highlight",
      "description": "`print_two_tables()` runs the builder twice (`G` and `2^128\\cdot G`) and prints the arrays `secp256k1_pre_g` and `secp256k1_pre_g_128`.",
      "file": "src/precompute_ecmult.c",
      "highlight": [
        {
          "start": 44,
          "end": 51
        }
      ],
      "title": "",
      "id": "30254"
    },
    {
      "type": "highlight",
      "description": "The resulting arrays are declared exactly the same way – `const` for normal builds, `mutable` for exhaustive tests.",
      "file": "src/precomputed_ecmult.h",
      "highlight": [
        {
          "start": 28,
          "end": 34
        }
      ],
      "title": "",
      "id": "30255"
    },
    {
      "type": "highlight",
      "description": "`WINDOW_G` is `ECMULT_WINDOW_SIZE` (default 15).  Table size grows exponentially: `ECMULT_TABLE_SIZE(W)`=2^(`W`−2).",
      "file": "src/ecmult.h",
      "highlight": [
        {
          "start": 14,
          "end": 24
        }
      ],
      "title": "",
      "id": "30256"
    },
    {
      "type": "highlight",
      "description": "The comb tables default to `COMB_BLOCKS` = 11, `COMB_TEETH` = 6 – a `22 kB` blob – but **exhaustive-test mode** overrides them with tiny values.",
      "file": "src/ecmult_gen.h",
      "highlight": [
        {
          "start": 64,
          "end": 72
        }
      ],
      "title": "",
      "id": "30257"
    },
    {
      "type": "textOnly",
      "description": "Each `secp256k1_ge_storage` record is 64 bytes, so moving `WINDOW_G` from 15 to 20 multiplies table size by `2^(20−15)=32`. Larger values speed up signing but bloat the binary; exhaustive tests choose 3-8 to stay small.",
      "title": "",
      "id": "30258"
    },
    {
      "type": "highlight",
      "description": "In exhaustive tests the big blobs are absent; they are recomputed at start-up with the same `compute functions`.",
      "file": "src/tests_exhaustive.c",
      "highlight": [
        {
          "start": 391,
          "end": 394
        }
      ],
      "title": "",
      "id": "30259"
    },
    {
      "type": "highlight",
      "description": "CMake first builds the two generator executables, compiles the freshly written `precomputed_ecmult*.c` files into an **object library**, and then links those objects into the single `secp256k1.c` translation unit.",
      "file": "src/CMakeLists.txt",
      "highlight": [
        {
          "start": 4,
          "end": 12
        }
      ],
      "title": "",
      "id": "30260"
    },
    {
      "type": "textOnly",
      "description": "Summary:  (1) builder functions produce points in memory,  (2) two helper binaries dump them as `C` arrays,  (3) the generated `.c` files are compiled into the library, giving us enormous, read-only lookup tables whose size is controlled by `WINDOW_G` and the `COMB_*` parameters.",
      "title": "",
      "id": "30261"
    }
  ]
}