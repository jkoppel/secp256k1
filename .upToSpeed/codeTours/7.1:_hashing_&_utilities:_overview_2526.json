{
  "title": "7.1: Hashing & Utilities: Overview",
  "id": "Sx46S1+JQD+b5w2NhoN7xyByyPdki5BJAsmzNR/t4xc=",
  "originalId": 2526,
  "position": 27,
  "steps": [
    {
      "type": "textOnly",
      "description": "This brief tour introduces `libsecp256k1`â€™s constant-time hashing and sorting helpers.  By the end you will know which source files belong to the component, what data structures they expose, and why a bespoke heapsort is shipped.",
      "title": "",
      "id": "30116"
    },
    {
      "type": "revealFiles",
      "files": [
        "src/hash.h"
      ],
      "description": "`src/hash.h` is the public interface for hashing. It declares state objects and thin wrappers; the heavy lifting lives next door in `hash_impl.h`.",
      "title": "",
      "id": "30117"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_sha256` stores the eight 32-bit words of SHA-256 state, a 64-byte working buffer, and a byte counter. This struct supports streaming, constant-time hashing.",
      "file": "src/hash.h",
      "highlight": [
        {
          "start": 13,
          "end": 17
        }
      ],
      "title": "",
      "id": "30118"
    },
    {
      "type": "highlight",
      "description": "Two wrappers build on that raw state:\n- **secp256k1_hmac_sha256** holds *inner* and *outer* hash contexts for HMAC-SHA256.\n- **secp256k1_rfc6979_hmac_sha256** keeps the `v` and `k` variables used by RFC-6979 deterministic nonce generation.",
      "file": "src/hash.h",
      "highlight": [
        {
          "start": 24,
          "end": 37
        }
      ],
      "title": "",
      "id": "30119"
    },
    {
      "type": "revealFiles",
      "files": [
        "src/hsort.h"
      ],
      "description": "`src/hsort.h` exposes an in-place heapsort whose call signature mirrors `qsort_r`.",
      "title": "",
      "id": "30120"
    },
    {
      "type": "highlight",
      "description": "The opening comment explains the need for a custom sorter: standard library `qsort()` offers no performance guarantees under malicious inputs, whereas cryptographic software must remain fast and data-independent.",
      "file": "src/hsort.h",
      "highlight": [
        {
          "start": 13,
          "end": 30
        }
      ],
      "title": "",
      "id": "30121"
    },
    {
      "type": "highlight",
      "description": "`hash_impl.h` starts by including its own header. From here down the full **SHA-256**, **HMAC**, and **RFC-6979** algorithms are implemented.",
      "file": "src/hash_impl.h",
      "highlight": [
        {
          "start": 7,
          "end": 11
        }
      ],
      "title": "",
      "id": "30122"
    },
    {
      "type": "highlight",
      "description": "`hsort_impl.h` follows the same header/implementation split, supplying the **constant-time heapsort** after including `hsort.h`.",
      "file": "src/hsort_impl.h",
      "highlight": [
        {
          "start": 7,
          "end": 12
        }
      ],
      "title": "",
      "id": "30123"
    },
    {
      "type": "highlight",
      "description": "Both implementation files are ultimately pulled into a single translation unit (`secp256k1.c`). This pattern lets the compiler inline aggressively and keeps secret-dependent code paths inside one compilation boundary.",
      "file": "src/secp256k1.c",
      "highlight": [
        {
          "start": 33,
          "end": 39
        }
      ],
      "title": "",
      "id": "30124"
    },
    {
      "type": "textOnly",
      "description": "You have now seen the four files (`hash.h`, `hash_impl.h`, `hsort.h`, `hsort_impl.h`), the three hashing state structs, and the motivation for a custom heapsort. Later tours will dive into the actual algorithms.",
      "title": "",
      "id": "30125"
    }
  ]
}