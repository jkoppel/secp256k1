{
  "title": "7.5: Compile-time Assumptions Guard",
  "id": "5XirEx4llQuncv9dxpaHGz/suMY7JECuxjEcYyFDD8o=",
  "originalId": 2533,
  "position": 34,
  "steps": [
    {
      "type": "textOnly",
      "description": "`libsecp256k1` refuses to build unless the host `C` implementation can prove – at compile-time – that it behaves exactly like the code expects.  The test lives in one small function packed with `STATIC_ASSERTs`; we will step through them and see why any failure aborts compilation.",
      "title": "",
      "id": "30222"
    },
    {
      "type": "highlight",
      "description": "The header immediately states its purpose: catch **implementation-defined** behaviour before it becomes **undefined behaviour** in cryptographic code.",
      "file": "src/assumptions.h",
      "highlight": [
        {
          "start": 17,
          "end": 20
        }
      ],
      "title": "",
      "id": "30223"
    },
    {
      "type": "highlight",
      "description": "These first assertions establish fundamental platform requirements. The byte size check ensures consistent memory operations across the codebase. The integer promotion check prevents subtle overflow bugs that could compromise cryptographic operations - particularly important when dealing with 32-bit arithmetic in crypto implementations.",
      "file": "src/assumptions.h",
      "highlight": [
        {
          "start": 28,
          "end": 34
        }
      ],
      "title": "",
      "id": "30224"
    },
    {
      "type": "highlight",
      "description": "Casting between signed and unsigned integers is only *implementation-defined*. The comment defines the exact behaviour we require: reinterpret the low bits as `two’s-complement`, for every size combination the library ever uses.",
      "file": "src/assumptions.h",
      "highlight": [
        {
          "start": 35,
          "end": 42
        }
      ],
      "title": "",
      "id": "30225"
    },
    {
      "type": "highlight",
      "description": "8-bit demonstration: converting the byte `0xAB` to `int8_t` must yield `−0x55`. The series of tests covers **unsigned→signed**, **wider→narrower**, and positive/negative cases – proving **two’s-complement semantics** instead of sign-magnitude or one’s-complement.",
      "file": "src/assumptions.h",
      "highlight": [
        {
          "start": 44,
          "end": 48
        }
      ],
      "title": "",
      "id": "30226"
    },
    {
      "type": "highlight",
      "description": "The same idea is extended to `16-bit` conversions, again insisting that the `high bit` becomes a `sign bit` and that `truncation` simply discards high-order bits.",
      "file": "src/assumptions.h",
      "highlight": [
        {
          "start": 50,
          "end": 53
        }
      ],
      "title": "",
      "id": "30227"
    },
    {
      "type": "highlight",
      "description": "Further extended to `32-bit` values (and to `64/128-bit` on the next slide) so every integer width the `library` touches is covered.",
      "file": "src/assumptions.h",
      "highlight": [
        {
          "start": 56,
          "end": 59
        }
      ],
      "title": "",
      "id": "30228"
    },
    {
      "type": "highlight",
      "description": "`64-bit` (and optionally `128-bit`) checks complete the **two’s-complement** proof chain.  If the target `CPU` used a non-standard encoding these `asserts` would fail instantly.",
      "file": "src/assumptions.h",
      "highlight": [
        {
          "start": 61,
          "end": 67
        }
      ],
      "title": "",
      "id": "30229"
    },
    {
      "type": "highlight",
      "description": "Right-shifting a negative signed value is another implementation choice. The asserts show that the compiler must implement an **arithmetic** shift (sign-extension) – exactly what `big-integer algorithms` rely on.",
      "file": "src/assumptions.h",
      "highlight": [
        {
          "start": 72,
          "end": 78
        }
      ],
      "title": "",
      "id": "30230"
    },
    {
      "type": "highlight",
      "description": "The function is marked `__unavailable__`: even if someone tried to call it, the compiler would reject the attempt. Its sole purpose is to host the assertions.",
      "file": "src/assumptions.h",
      "highlight": [
        {
          "start": 22,
          "end": 26
        }
      ],
      "title": "",
      "id": "30231"
    },
    {
      "type": "highlight",
      "description": "A final belt-and-suspenders: if the function ever *is* linked and executed, it aborts immediately with `VERIFY_CHECK(0)`.",
      "file": "src/assumptions.h",
      "highlight": [
        {
          "start": 83,
          "end": 85
        }
      ],
      "title": "",
      "id": "30232"
    },
    {
      "type": "highlight",
      "description": "`STATIC_ASSERT` itself explains why any failed assumption halts the build: when its condition is false it creates two identical `case 0:` labels in a `switch`, which every C compiler treats as a hard error. No object file is produced, so the offending environment is ruled out at compile-time.",
      "file": "src/util.h",
      "highlight": [
        {
          "start": 60,
          "end": 71
        }
      ],
      "title": "",
      "id": "30233"
    },
    {
      "type": "textOnly",
      "description": "Why so strict?\n\n- Cryptographic code is unforgiving: undefined behaviour can leak secrets or corrupt signatures.\n- **Two's-complement**, **arithmetic shifts** and **exact integer widths** are assumptions baked into the field- and scalar-arithmetic routines; violating them would let the compiler rewrite maths in unexpected ways.\n- Catching problems during compilation is cheaper, clearer, and safer than trying to detect subtle runtime misbehaviour.\n\nIf any `STATIC_ASSERT` fails, the compiler refuses to continue – guaranteeing that `libsecp256k1` only runs on platforms where its bit-level reasoning is valid.",
      "title": "",
      "id": "30234"
    }
  ]
}