{
  "title": "8.2: Public API Header (secp256k1.h)",
  "id": "IDTfLMhBsfZW4kiOhn6cNVmc/Nsf3uV2QysB14Mttpg=",
  "originalId": 2530,
  "position": 31,
  "steps": [
    {
      "type": "textOnly",
      "description": "You have already seen the big-picture overview; this tour zooms into the public API header and builds the mental map you will need before we descend into the math layer.",
      "title": "",
      "id": "30126"
    },
    {
      "type": "highlight",
      "description": "Every **prototype** obeys the **argument-ordering rules** declared here (**context** first, **outputs** next, combined **IN/OUT**, finally **pure inputs**). Knowing these rules makes the otherwise-surprising parameter order predictable.",
      "file": "include/secp256k1.h",
      "highlight": [
        {
          "start": 10,
          "end": 25
        }
      ],
      "title": "",
      "id": "30127"
    },
    {
      "type": "highlight",
      "description": "First opaque type: `secp256k1_context` (line 50).  The preceding comment explains it stores randomness and callback pointers, and warns that contexts must be randomised before any secret-key work.",
      "file": "include/secp256k1.h",
      "highlight": [
        {
          "start": 27,
          "end": 50
        }
      ],
      "title": "",
      "id": "30128"
    },
    {
      "type": "highlight",
      "description": "The other two core handles are introduced next. Both are fixed-size 64-byte blobs whose internals are private:\n- `secp256k1_pubkey` – a parsed, valid public key.\n- `secp256k1_ecdsa_signature` – a parsed ECDSA signature.",
      "file": "include/secp256k1.h",
      "highlight": [
        {
          "start": 52,
          "end": 76
        }
      ],
      "title": "",
      "id": "30129"
    },
    {
      "type": "highlight",
      "description": "Context life-cycle, part 1: create.  One `malloc` per call, flags must currently be **SECP256K1_CONTEXT_NONE**.  Lines 274-279 strongly recommend calling `secp256k1_context_randomize` before any secret-key operations.",
      "file": "include/secp256k1.h",
      "highlight": [
        {
          "start": 258,
          "end": 285
        }
      ],
      "title": "",
      "id": "30130"
    },
    {
      "type": "highlight",
      "description": "Context life-cycle, part 2: `clone` duplicates an existing context (again, one `malloc`); `destroy` frees it. Because the pointer is **non-const**, callers need exclusive access when cloning, randomising, or freeing.",
      "file": "include/secp256k1.h",
      "highlight": [
        {
          "start": 287,
          "end": 318
        }
      ],
      "title": "",
      "id": "30131"
    },
    {
      "type": "highlight",
      "description": "**Runtime randomisation.** A `32-byte seed` blinds secret-dependent operations to reduce side-channel leakage. Safe to call multiple times during long-running processes; unsupported on the `static context`.",
      "file": "include/secp256k1.h",
      "highlight": [
        {
          "start": 791,
          "end": 826
        }
      ],
      "title": "",
      "id": "30132"
    },
    {
      "type": "highlight",
      "description": "Callbacks: `set_illegal_callback` lets applications intercept programmer mistakes (violated pre-conditions) instead of aborting.",
      "file": "include/secp256k1.h",
      "highlight": [
        {
          "start": 350,
          "end": 363
        }
      ],
      "title": "",
      "id": "30133"
    },
    {
      "type": "highlight",
      "description": "The sibling `set_error_callback` handles internal consistency failures (hardware faults, memory corruption).  If this fires, continuing execution is undefined.",
      "file": "include/secp256k1.h",
      "highlight": [
        {
          "start": 386,
          "end": 390
        }
      ],
      "title": "",
      "id": "30134"
    },
    {
      "type": "highlight",
      "description": "**Public-key helpers**: parse compressed/uncompressed/hybrid encodings into a `secp256k1_pubkey`, serialise back out, compare, and sort.",
      "file": "include/secp256k1.h",
      "highlight": [
        {
          "start": 392,
          "end": 434
        }
      ],
      "title": "",
      "id": "30135"
    },
    {
      "type": "highlight",
      "description": "`ECDSA verify`: checks a lower-S signature against a 32-byte message hash and public key. Non-canonical signatures are rejected.",
      "file": "include/secp256k1.h",
      "highlight": [
        {
          "start": 566,
          "end": 571
        }
      ],
      "title": "",
      "id": "30136"
    },
    {
      "type": "highlight",
      "description": "`ECDSA sign`: produces a **lower-S signature**, optionally with a **custom nonce generator** (**RFC 6979** compatible) to integrate with HSMs.",
      "file": "include/secp256k1.h",
      "highlight": [
        {
          "start": 647,
          "end": 654
        }
      ],
      "title": "",
      "id": "30137"
    },
    {
      "type": "highlight",
      "description": "**Tweak-add helpers**: safely add a `32-byte tweak` to a `secret key` or to the corresponding `public key` (generator-scaled automatically).",
      "file": "include/secp256k1.h",
      "highlight": [
        {
          "start": 730,
          "end": 753
        }
      ],
      "title": "",
      "id": "30138"
    },
    {
      "type": "highlight",
      "description": "`Tweak-mul` siblings do the same for `scalar` and `point multiplication` – useful for **adaptor signatures** and **key-homomorphic commitments**.",
      "file": "include/secp256k1.h",
      "highlight": [
        {
          "start": 768,
          "end": 789
        }
      ],
      "title": "",
      "id": "30139"
    },
    {
      "type": "highlight",
      "description": "`tagged_sha256` implements the **BIP-340** domain-separated hash primitive `SHA256(SHA256(tag)||SHA256(tag)||msg)`.  Pre-compute tag hashes once, reuse them everywhere.",
      "file": "include/secp256k1.h",
      "highlight": [
        {
          "start": 860,
          "end": 867
        }
      ],
      "title": "",
      "id": "30140"
    },
    {
      "type": "textOnly",
      "description": "That covers the core opaque types, context life-cycle, run-time hardening hooks, and the high-traffic crypto call families.  With this map in mind, you are ready to dive into the implementation source in the next tour.",
      "title": "",
      "id": "30141"
    }
  ]
}