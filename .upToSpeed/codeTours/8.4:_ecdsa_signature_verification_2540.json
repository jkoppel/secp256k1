{
  "title": "8.4: ECDSA Signature Verification",
  "id": "yvULiPitjqJoFCFJuZ/06YG2N+wVJbiRbjWki5FPBoQ=",
  "originalId": 2540,
  "position": 41,
  "steps": [
    {
      "type": "textOnly",
      "description": "This walkthrough follows the **constant-time verification path** of **ECDSA** signatures inside `secp256k1`. Every step is backed by the exact lines of code that implement the idea.",
      "title": "",
      "id": "30669"
    },
    {
      "type": "highlight",
      "description": "Verification starts in `secp256k1_ecdsa_sig_verify`. The very first defence is to reject signatures whose `r` or `s` component is zero (lines 204-206). A zero value would force the resulting curve point to infinity, which can never satisfy the **ECDSA** equations.",
      "file": "src/ecdsa_impl.h",
      "highlight": [
        {
          "start": 195,
          "end": 206
        }
      ],
      "title": "",
      "id": "30670"
    },
    {
      "type": "highlight",
      "description": "The core scalars are prepared in constant-time:\n- `sn` = `s⁻¹`  (208)\n- `u1` = `sn·message` (209)\n- `u2` = `sn·r` (210)\nShamir's trick is then invoked through `secp256k1_ecmult` (212).  In one pass it returns `pr` = `u1·G + u2·P` instead of two separate scalar multiplies.",
      "file": "src/ecdsa_impl.h",
      "highlight": [
        {
          "start": 208,
          "end": 213
        }
      ],
      "title": "",
      "id": "30671"
    },
    {
      "type": "highlight",
      "description": "For builds that define `EXHAUSTIVE_TEST_ORDER` the `library` swaps the real 256-bit group for a tiny test group (orders 7, 13 or 199).  In that mode verification is simplified to a direct `x-coordinate comparison` (`219-226`).  The rest of this tour describes the normal production path that starts in the `#else` branch.",
      "file": "src/ecdsa_impl.h",
      "highlight": [
        {
          "start": 217,
          "end": 227
        }
      ],
      "title": "",
      "id": "30672"
    },
    {
      "type": "highlight",
      "description": "Back in the mainline, the claimed `r` is loaded into a field element `xr` (229-232).  No inversions are performed here – the number is simply reduced into the prime field `p`.",
      "file": "src/ecdsa_impl.h",
      "highlight": [
        {
          "start": 229,
          "end": 232
        }
      ],
      "title": "",
      "id": "30673"
    },
    {
      "type": "highlight",
      "description": "The adjacent block comment (233-248) lays out the algebra that lets the code avoid an expensive field inversion. Because `p < 2·n`, only the residues `r` and `r+n` can lie inside the prime field, so testing those two possibilities is sufficient.",
      "file": "src/ecdsa_impl.h",
      "highlight": [
        {
          "start": 233,
          "end": 248
        }
      ],
      "title": "",
      "id": "30674"
    },
    {
      "type": "highlight",
      "description": "First test: `secp256k1_gej_eq_x_var` compares `xr`·`Z`² against the X coordinate of `pr` (249-251).  If the equality fails and `xr+n` ≥ `p` (253-255) the second test can be skipped entirely.",
      "file": "src/ecdsa_impl.h",
      "highlight": [
        {
          "start": 249,
          "end": 255
        }
      ],
      "title": "",
      "id": "30675"
    },
    {
      "type": "highlight",
      "description": "Otherwise `xr` is increased by `n` (`257`) and the equality test is repeated (`258-259`).  If either check matches, the signature is accepted.",
      "file": "src/ecdsa_impl.h",
      "highlight": [
        {
          "start": 257,
          "end": 260
        }
      ],
      "title": "",
      "id": "30676"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_gej_eq_x_var` achieves the comparison without inversions: it squares the Jacobian Z, multiplies by the candidate x and performs a constant-time field comparison (423-424).  No data-dependent branches or memory look-ups occur.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 417,
          "end": 425
        }
      ],
      "title": "",
      "id": "30677"
    },
    {
      "type": "textOnly",
      "description": "Putting it together: the function performs all arithmetic in uniform code paths, uses at most two `x-coordinate` comparisons, and exits successfully only when `pr` reproduces the `R` value claimed by the signature. That is the **constant-time verification path** in `secp256k1`.",
      "title": "",
      "id": "30678"
    }
  ]
}