{
  "title": "8.6: ECKEY – Key Tweaks (Add / Mul)",
  "id": "mtos/hjXN/PUxyJKKQusprNOsgZgJVzuuoS3AxW9qaU=",
  "originalId": 2542,
  "position": 43,
  "steps": [
    {
      "type": "textOnly",
      "description": "This tour walks through the four tweak helpers that Taproot, MuSig and other protocols rely on. Each helper combines an existing key with a secret scalar while keeping execution constant-time and rejecting unusable outputs.",
      "title": "",
      "id": "30659"
    },
    {
      "type": "highlight",
      "description": "Private-key addition tweak.\n- line 59 calls `scalar_add` to compute `k+t mod n`.\n- line 60 rejects the result when it is zero – `0` cannot serve as a secret key.",
      "file": "src/eckey_impl.h",
      "highlight": [
        {
          "start": 58,
          "end": 61
        }
      ],
      "title": "",
      "id": "30660"
    },
    {
      "type": "highlight",
      "description": "`scalar_add` processes all four 64-bit limbs, then performs one unconditional modular reduction.  No secret-dependent branches appear, so timing is fixed.",
      "file": "src/scalar_4x64_impl.h",
      "highlight": [
        {
          "start": 94,
          "end": 118
        }
      ],
      "title": "",
      "id": "30661"
    },
    {
      "type": "highlight",
      "description": "`scalar_is_zero` ORs all limbs and compares against 0.  The guard in the tweak helper therefore leaks no timing information.",
      "file": "src/scalar_4x64_impl.h",
      "highlight": [
        {
          "start": 167,
          "end": 171
        }
      ],
      "title": "",
      "id": "30662"
    },
    {
      "type": "highlight",
      "description": "**Public-key addition tweak.**\n1. Convert the affine point to Jacobian (64-65).\n2. ecmult with (1, t) yields `P + t·G` (66).\n3. line 68 rejects the point at infinity.\n4. Conversion back to affine (71).",
      "file": "src/eckey_impl.h",
      "highlight": [
        {
          "start": 63,
          "end": 72
        }
      ],
      "title": "",
      "id": "30663"
    },
    {
      "type": "highlight",
      "description": "`gej_is_infinity` simply returns the cached infinity flag; its constant-time nature keeps the earlier infinity check safe.",
      "file": "src/group_impl.h",
      "highlight": [
        {
          "start": 440,
          "end": 444
        }
      ],
      "title": "",
      "id": "30664"
    },
    {
      "type": "highlight",
      "description": "**Private-key multiplication tweak.**\n- line 77 aborts if the tweak itself is zero.\n- line 79 multiplies `k·t mod n` using `scalar_mul`.",
      "file": "src/eckey_impl.h",
      "highlight": [
        {
          "start": 75,
          "end": 80
        }
      ],
      "title": "",
      "id": "30665"
    },
    {
      "type": "highlight",
      "description": "`scalar_mul` performs a full 512-bit product followed by reduction, all within fixed-size loops – another constant-time primitive.",
      "file": "src/scalar_4x64_impl.h",
      "highlight": [
        {
          "start": 855,
          "end": 864
        }
      ],
      "title": "",
      "id": "30666"
    },
    {
      "type": "highlight",
      "description": "**Public-key multiplication tweak.**\n- line 85 rejects `tweak = 0`\n- `ecmult` with `(t, 0)` computes `t·P` (90)\n- With `P≠∞` and `t≠0`, the only way to obtain `∞` is `t≡n`; callers may treat that as failure",
      "file": "src/eckey_impl.h",
      "highlight": [
        {
          "start": 83,
          "end": 92
        }
      ],
      "title": "",
      "id": "30667"
    },
    {
      "type": "textOnly",
      "description": "Why zero or infinity are rejected and timing is safe:\n- A secret key of `0` or a public point at `infinity` has no discrete-log inverse, breaking **Schnorr**, **Taproot** and **MuSig** security.\n- All scalar operations (`add`, `mul`, `is_zero`) iterate over fixed limbs; group checks rely on public state only.\nThese helpers therefore reveal at most a single public **success/failure bit** while maintaining constant-time guarantees.",
      "title": "",
      "id": "30668"
    }
  ]
}