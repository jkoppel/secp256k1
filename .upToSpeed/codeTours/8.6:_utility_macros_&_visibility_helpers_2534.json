{
  "title": "8.6: Utility Macros & Visibility Helpers",
  "id": "Aj26azOiuhF+F86TrtxKYfxnrAaP9EcZS9ypHyozxwY=",
  "originalId": 2534,
  "position": 35,
  "steps": [
    {
      "type": "textOnly",
      "description": "This tour looks at the tiny but critical helpers that live in `src/util.h` and `src/util_local_visibility.h`.\nThey underpin error-handling, constant-time operations, memory alignment, and even how global symbols are hidden from the outside world.",
      "title": "",
      "id": "30210"
    },
    {
      "type": "highlight",
      "description": "Runtime problems are funneled through a minimal callback object.\n- Lines 87-90 introduce a `struct` holding a `function pointer` plus opaque user data.\n- Lines 92-94 provide the `helper` that actually executes the callback, giving the rest of the code a uniform interface.",
      "file": "src/util.h",
      "highlight": [
        {
          "start": 87,
          "end": 95
        }
      ],
      "title": "",
      "id": "30211"
    },
    {
      "type": "highlight",
      "description": "Here are the built-in policies.\nIf the application does not supply its own (`USE_EXTERNAL_DEFAULT_CALLBACKS`), these two functions abort the process on illegal arguments or internal errors, making failures unmistakable.",
      "file": "src/util.h",
      "highlight": [
        {
          "start": 96,
          "end": 106
        }
      ],
      "title": "",
      "id": "30212"
    },
    {
      "type": "highlight",
      "description": "Lines 112-120 wrap the functions into immutable `secp256k1_callback` objects.\nAny file can include `util.h` and reuse these defaults without extra **boiler-plate**.",
      "file": "src/util.h",
      "highlight": [
        {
          "start": 112,
          "end": 120
        }
      ],
      "title": "",
      "id": "30213"
    },
    {
      "type": "textOnly",
      "description": "The next helpers implement constant-time behaviour to prevent side-channel leaks.",
      "title": "",
      "id": "30214"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_memczero` zeros a buffer only when `flag==1`, yet runs in constant time.\nThe volatile copy of flag (line 213) plus the bit-mask in line 214 prevent the compiler from introducing data-dependent branches.",
      "file": "src/util.h",
      "highlight": [
        {
          "start": 208,
          "end": 220
        }
      ],
      "title": "",
      "id": "30215"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_memclear` scrubs sensitive data and **guarantees** the memset is not optimised away.\n`MSVC` uses `SecureZeroMemory`, while `GCC`/`Clang` implement an inline assembly barrier to prevent optimization.",
      "file": "src/util.h",
      "highlight": [
        {
          "start": 223,
          "end": 241
        }
      ],
      "title": "",
      "id": "30216"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_memcmp_var` acts like `memcmp` but avoids historical compiler bugs.\nIt is deliberately variable-time because many callers compare public data.",
      "file": "src/util.h",
      "highlight": [
        {
          "start": 255,
          "end": 266
        }
      ],
      "title": "",
      "id": "30217"
    },
    {
      "type": "highlight",
      "description": "`secp256k1_int_cmov` copies `*a` into `*r` when `flag==1` without revealing flag via timing.\nThe bit-mask dance (lines 295-300) avoids conditional branches entirely.",
      "file": "src/util.h",
      "highlight": [
        {
          "start": 285,
          "end": 301
        }
      ],
      "title": "",
      "id": "30218"
    },
    {
      "type": "highlight",
      "description": "Other files rely on these alignment helpers:\n\n- `ALIGNMENT` picks the platform's widest natural alignment (or 16 bytes as a safe default)\n- `CEIL_DIV` rounds an integer division up\n- `ROUND_TO_ALIGN` pads any size to the next multiple of `ALIGNMENT` – used when allocating buffers that will later hold bigger structs",
      "file": "src/util.h",
      "highlight": [
        {
          "start": 170,
          "end": 183
        }
      ],
      "title": "",
      "id": "30219"
    },
    {
      "type": "highlight",
      "description": "Finally, `SECP256K1_LOCAL_VAR` hides global symbols inside the shared library.\nWith **GCC** `≥ 4` it becomes `extern __attribute__((visibility(\"hidden\")))`, preventing accidental symbol clashes while still allowing internal linkage.",
      "file": "src/util_local_visibility.h",
      "highlight": [
        {
          "start": 6,
          "end": 10
        }
      ],
      "title": "",
      "id": "30220"
    },
    {
      "type": "textOnly",
      "description": "These small utilities keep `libsecp256k1` safe, portable and leak-free — all without burdening the higher-level cryptographic code.",
      "title": "",
      "id": "30221"
    }
  ]
}