{
  "title": "9.3: ECDSA Signature Generation",
  "id": "0GEYgfhjahJcmf43WZBc4Qaf+TaQxvJrPRPaIXY60Io=",
  "originalId": 2539,
  "position": 40,
  "steps": [
    {
      "type": "textOnly",
      "description": "This walkthrough dissects `secp256k1_ecdsa_sig_sign` and follows each intermediate value from the secret nonce to the finished, low-S ECDSA signature.",
      "title": "",
      "id": "30235"
    },
    {
      "type": "highlight",
      "description": "Lines 274-279 turn the `256-bit nonce` into the point `R` using `ecmult_gen` (**fixed-base scalar multiplication**).  The `affine x-coordinate` is normalised and packed into a `scalar`; that number becomes `r`, the **first half of the signature**.",
      "file": "src/ecdsa_impl.h",
      "highlight": [
        {
          "start": 274,
          "end": 279
        }
      ],
      "title": "",
      "id": "30236"
    },
    {
      "type": "highlight",
      "description": "Two bits are stored in `recid` so `R` can be reconstructed later:\n- `bit 0` — the y-coordinate parity (odd ↔ 1)\n- `bit 1` — whether the x-coordinate overflowed the group order when mapped to `r`\nThe overflow case is astronomically unlikely but still captured for completeness.",
      "file": "src/ecdsa_impl.h",
      "highlight": [
        {
          "start": 280,
          "end": 285
        }
      ],
      "title": "",
      "id": "30237"
    },
    {
      "type": "highlight",
      "description": "The core **ECDSA** equation is evaluated with constant-time helpers:\n1. `n ← r·seckey + message  (mod n)`\n2. `s ← nonce⁻¹ · n          (mod n)`\nAll arithmetic is performed in the scalar field, never in the much larger prime field.",
      "file": "src/ecdsa_impl.h",
      "highlight": [
        {
          "start": 286,
          "end": 289
        }
      ],
      "title": "",
      "id": "30238"
    },
    {
      "type": "highlight",
      "description": "Secret intermediates are wiped immediately after use. The Jacobian point `rp` and affine point `r` are cleared together with the temporary scalar `n` — in constant time — removing them from memory as soon as they are no longer needed.",
      "file": "src/ecdsa_impl.h",
      "highlight": [
        {
          "start": 290,
          "end": 292
        }
      ],
      "title": "",
      "id": "30239"
    },
    {
      "type": "highlight",
      "description": "**Low-S enforcement**: if `s` falls in the upper half of the group order (`scalar_is_high`) it is negated to its low equivalent (`scalar_cond_negate`). The same bit flip is XORed into `recid` so the verifier can still recover the correct `R`.",
      "file": "src/ecdsa_impl.h",
      "highlight": [
        {
          "start": 293,
          "end": 297
        }
      ],
      "title": "",
      "id": "30240"
    },
    {
      "type": "highlight",
      "description": "Final guards ensure neither component is zero. A zero would be possible only if an attacker could find a `discrete log` for a curve point with `x = n` — considered cryptographically unreachable — but the check is present for absolute safety.",
      "file": "src/ecdsa_impl.h",
      "highlight": [
        {
          "start": 298,
          "end": 301
        }
      ],
      "title": "",
      "id": "30241"
    },
    {
      "type": "textOnly",
      "description": "The function therefore produces **compact**, **deterministic** and **low-S signatures**, records just enough metadata for public-key recovery, and erases all temporary secrets in constant time.",
      "title": "",
      "id": "30242"
    }
  ]
}